{
    "date_created": "2025-03-13T16:29:23.925218",
    "task": "Step Extraction",
    "model_used": "llama3.1:8b-instruct-q5_K_M",
    "time_taken": "0:00:35.695262",
    "article_text": "Voice Commands With The Arduino Speech Recognition Engine\nControl your device with voice commands using the Arduino Speech Recognition Engine\n\nAuthorPablo Marquínez\nLast revision07/03/2025\nWhat Is Speech Recognition\nSpeech recognition is a technology field that captures, interprets, and computes a voice to transform it into text (TTS). Once the voice has been transformed into text, it can be applied to different applications, from speech dictation, to command-voice controllers, health monitoring, robotics and artificial intelligence or accessibility, among many others.\n\nThe Arduino Speech Recognition Engine\nThe Arduino Speech Recognition Engine\nThe Arduino Speech Recognition Engine\n\nThe Arduino Speech Recognition Engine, which is powered by Cyberon, is one of the best platforms available on the market to perform speech recognition on embedded microcontrollers. The full compatibility with multiple Arduino boards and with the Arduino IDE makes it very flexible, efficient, and easy to use, both in hobby projects and in professional products.\n\nThe Arduino Speech Recognition Engine can be further customized based on the license type, check the Licensing section of this tutorial to learn more.\n\nOverview\nThis tutorial shows how to use the Arduino Speech Recognition Engine to configure multiple voice commands and perform custom tasks based on the recognized commands. To do that, it is necessary to perform a series of steps to register your board and activate your trial and free-of-charge license. Afterward, you will test the demo sketch and learn how to create your own custom voice commands.\n\nIn case you are interested in unlocking the full potential of the tool, the tutorial will teach you how to acquire a paid license to unblock the free license limitations.\n\nGoals\nSet the voice command triggers\nGet your board serial number and the required files to set up the library\nGet the license and use the demo sketch\nCreate a new project with your own custom voice commands\nLearn how to acquire and use a paid license in case you want to remove the free license limitations\nRequired Hardware and Software\nTo use the Arduino Speech Recognition Engine, you will need one of the following boards:\n\nArduino Portenta H7 (any variant) + Portenta Vision Shield (LoRa or Ethernet)\nArduino Nicla Vision\nArduino Nano 33 BLE Sense Rev 1\nArduino Nano 33 BLE Sense Rev 2\nArduino Nano RP2040\nIn the case of the Portenta H7, remember that is always possible to add an external microphone as additional hardware, instead of using the Portenta Vision Shield.\n\nAdditionally, you will need the following hardware and software:\n\nUSB-C® cable (x1)\nArduino IDE 1.8.10+, Arduino IDE 2.0+, Arduino Cloud Editor, or Arduino-cli\nInstructions\nThe Arduino Speech Recognition Engine is a solution powered by Cyberon that requires a series of additional steps to unleash its potential. This tutorial will explain how to:\n\nGet the Serial Number of your Arduino device\nInstall the library on your IDE\nTest the free demo sketch\nIn case you would like to extend the engine functionalities, you will have to purchase a voucher on the Arduino Store and follow the next steps:\n\nFill in the required information on Cyberon's website\nGet the required files and activate your license\nSetup\nSetup the Library\nThere are three libraries, you will need to install one or another depending on which board you are using:\n\nPortenta H7 Family: Cyberon_DSpotterSDK_Maker_PortentaH7\nNicla Vision: Cyberon_DSpotterSDK_Maker_NiclaVision\nNano 33 BLE Sense (Rev1 & Rev2): Cyberon_DSpotterSDK_Maker_33BLE\nNano RP2040: Cyberon_DSpotterSDK_Maker_RP2040\nInside each of the libraries and under the folder \"extra\", you will find additional documentation made by Cyberon. Check them out in case you need more information\n\nGo to the Library Manager, search for the library that you need for your board and install it.\n\nIn case you need more instructions about how to install libraries, read this guide.\n\nGet The Serial Number\nTo use the Arduino Speech Recognition Engine, you will need a free trial license or paid license. In any of the cases, the serial number of the board that you are using is necessary to activate the license.\n\nTo get your board's serial number, and once you have the library downloaded, navigate to File > Examples > Cyberon_DSpotterSDK > GetSerialNumber.\n\nConnect your board to the computer, upload the sketch to it and, once is done, open the Serial Monitor to see your device's Serial Number.\n\nOn the Arduino IDE 1.6.x or previous versions, you can also find the serial number as follow: select the board's serial port and click on tools > Get Board Info, you will see the \"SN\" number, save it for later.\n\nGet the Demo License\nOnce you have the Serial number, open: https://tool.cyberon.com.tw/ArduinoDSpotterAuth/FDMain.php\n\nSelect your board\nFill in the \"Board serial number\" field\nClick the Submit button\nGet License Page\nGet License Page\n\nOnce everything is ready, click on the submit button to get your license, it will print an array of numbers for the license. Save it in a safe place, it will be used in the next step.\n\nTest the Free Demo Sketch\nOpen the sketch File > Example > Cyberon_DSpotterSDK > VoiceRecognition\n\nNavigate to the CybLicense.h tab.\n\nPaste your license between the brackets, like in the following example:\n\n#include <stdint.h>\n\nconst uint32_t g_lpdwLicense[] = {\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000\n    };\nRemember to replace the g_lpdwLicense values with your license ones.\n\nNow switch back to the VoiceRecognition tab and upload the sketch.\n\nYou can now open the Serial Monitor where you can see the available commands that the CyberonSDK recognizes.\n\nSerial Monitor Trigger and Command list\nSerial Monitor Trigger and Command list\n\nNow it is time to test the engine. Feel free to say out loud the commands and see how it recognizes your voice!\n\nPlease note that the sketch and license that you are using are a \"demo\" version with the following limitations:\n\nA maximum of 50 recognitions per each board start\nA 20 seconds delay before each trigger recognition\nCustomized Commands\nTo expand the features and human interaction of your projects, you can create your own voice commands with the Arduino Speech Recognition Engine. In this section, you will learn about how to use the Cyberon Model Configuration webpage to create a new project with custom voice commands.\n\nThese steps are compatible with the trial license, used in this tutorial, and the paid license\n\nGo to Cyberon Model Configuration and fill in the required fields:\n\nE-mail address\nBoard model\nSerial Number of your board\nEULA Agreement - Please, read it carefully\nCyberon Model Configuration\nCyberon Model Configuration\n\nClick next, you will see a new page to:\n\nCreate a new project\nImport an existing project\nCreate a New Project\nWarning: each project is bound to a single Arduino board with the declared Serial Number. If you would like to use the Arduino Speech Recognition Engine on another Arduino board, you need to create a new project from scratch and assign it to the new Serial Number.\n\nTo create a new project first you need to select the desired language for the speech recognition. Once is set, click Create.\n\nCyberon, New Project\nCyberon, New Project\n\nNow you need to configure the following steps to create a new trigger:\n\nCreate the Input Trigger word, for example \"Hey Arduino\". The Input Trigger word will trigger the device to let the board know that you are going to say a command after that.\nCyberon Adding the Input trigger\nCyberon Adding the Input trigger\nAdd the Command list. These commands will be used to do tasks on your sketch. For example, if you have a command which is share, later you will be able to get that command and proceed with some job inside the sketch easily.\nCyberon Adding the Command list\nCyberon Adding the Command list\nThe next step is just to confirm that the data written is correct. Click on Next to finish.\nOn the next page you will see all the configurations already set. Check it out to confirm that everything is correct. In case something is wrong, click on Back to fix it.\n\nCyberon finishing model configuration\nCyberon finishing model configuration\n\nOnce everything is checked, click Confirm and you will get the model header file (model.h). This header is part of your new project and you need to copy it onto your sketch folder to use it.\n\nWarning: when a project is created and confirmed, it cannot be further modified.\n\nYou will now get some files in your e-mail inbox. Download them to your computer.\n\nOn the IDE, open the example File > Examples > Cyberon_DSpotterSDK > VoiceRecognition and click File > Save As... and type a name for your sketch.\n\nOnce it is saved, open your File Explorer, and navigate to your sketch path.\n\nOn your sketch directory, paste the files you have got in your e-mail inbox before:\n\nCybLicense_<id>.h\nModel_<id>.h\nNow to implement the Input Trigger Command and the Command List open the sketch and change the following headers with the downloaded ones:\n\n...\n\n#include \"CybLicense.h\" -> #include \"CybLicense_<id>.h\"\n\n...\n\n#include \"Model_L1.h\" -> #include \"Model_<id>.h\"\n\n...\n\n#include \"Model_L0.h\" -> #include \"Model_<id>.h\"\nAt this point, the project is set to be used. Upload the sketch and open the Serial Monitor. Now you can test your new Input Trigger Word and the Command list that you have created. Pronounce the new trigger words out loud, you will see the recognized words on the Serial Monitor.\n\nModify the Example Codes\nIf you want to execute custom actions with the trigger and commands you defined, you can do it inside the VRCallback function.\n\nFirst you need to know your trigger and commands IDs. You can find them listed in your Serial Monitor, in this case are the following:\n\nKeyword\tID\nHey Arduino\t100\nread\t10000\nupload\t10001\nshare\t10002\nHere is the VRCallback function modified so you can easily give functionality to the commands detection:\n\n// Callback function for VR engine\nvoid VRCallback(int nFlag, int nID, int nScore, int nSG, int nEnergy)\n{\n  if (nFlag==DSpotterSDKHL::InitSuccess)\n  {\n      //ToDo\n  }\n  else if (nFlag==DSpotterSDKHL::GetResult)\n  {\n      /*\n      When getting an recognition result,\n      the following index and scores are also return to the VRCallback function:\n          nID        The result command id\n          nScore     nScore is used to evaluate how good or bad the result is.\n                     The higher the score, the more similar the voice and the result command are.\n          nSG        nSG is the gap between the voice and non-command (Silence/Garbage) models.\n                     The higher the score, the less similar the voice and non-command (Silence/Garbage) models are.\n          nEnergy    nEnergy is the voice energy level.\n                     The higher the score, the louder the voice.\n      */\n      //ToDo\n      switch(nID)\n      {\n          case 100:\n            Serial.println(\"The Trigger was heard\");\n            // Add your own code here\n            break;\n          case 10000:\n            Serial.println(\"The Command -read- was heard\");\n            // Add your own code here\n            break;\n          case 10001:\n            Serial.println(\"The Command -upload- was heard\");\n            // Add your own code here\n            break;\n          case 10002:\n            Serial.println(\"The Command -share- was heard\");\n            // Add your own code here\n            break;\n          default:\n            break;\n      }\n\n  }\n  else if (nFlag==DSpotterSDKHL::ChangeStage)\n  {\n      switch(nID)\n      {\n          case DSpotterSDKHL::TriggerStage:\n            LED_RGB_Off();\n            LED_BUILTIN_Off();\n            break;\n          case DSpotterSDKHL::CommandStage:\n            LED_BUILTIN_On();\n            break;\n          default:\n            break;\n      }\n  }\n  else if (nFlag==DSpotterSDKHL::GetError)\n  {\n      if (nID == DSpotterSDKHL::LicenseFailed)\n      {\n          //Serial.print(\"DSpotter license failed! The serial number of your device is \");\n          //Serial.println(DSpotterSDKHL::GetSerialNumber());\n      }\n      g_oDSpotterSDKHL.Release();\n      while(1);//hang loop\n  }\n  else if (nFlag == DSpotterSDKHL::LostRecordFrame)\n  {\n      //ToDo\n  }\n}\nWe added a switch...case that evaluates the nID variable and compares it with the different IDs. Inside each case add your custom code to be executed with the trigger or commands.\n\n...\n      switch(nID)\n      {\n          case 100:\n            Serial.println(\"The Trigger was heard\");\n            // Add your own code here\n            break;\n          case 10000:\n            Serial.println(\"The Command -read- was heard\");\n            // Add your own code here\n            break;\n          case 10001:\n            Serial.println(\"The Command -upload- was heard\");\n            // Add your own code here\n            break;\n          case 10002:\n            Serial.println(\"The Command -share- was heard\");\n            // Add your own code here\n            break;\n          default:\n            break;\n      }\n...\nUnlock Limitations (License)\nIn case you want to further customize your model or add additional commands or trigger words, we have the right licenses for you:\n\nSpeech Recognition license. Vouchers available on the Arduino Store.\nPro License. Feel free to contact us to unlock all the limitations.\nThere are different licensing options to fit the needs of your project. Read more in the Licensing section (Voucher codes). Note that you need to have an already existing project to use a paid license. Check the previous section to know more.\n\nBrowse to Cyberon's Licensed Project Configuration.\n\nFill in the required fields:\n\nE-mail address\nBoard\nSerial Number of your board\nVoucher code\nImport project: the .dsproj file that you received in your e-mail inbox during the creation of the project.\nEULA Agreement - Please read it carefully\nCyberon Model Configuration with a voucher code\nCyberon Model Configuration with a voucher code\n\nClick next, review your project options and press continue.\n\nYou will get a new e-mail with the new License and Model headers.\n\nWarning: in case you are using a Speech Recognition License (not Pro), please note that deployed models are not customizable. You can always purchase an additional voucher on Arduino Store to generate a new model for the same hardware.\n\nOpen the sketch you have duplicated in the Create New Project section.\n\nRepeat the replacement of #include files, with the latest ones (they have a different ID):\n\n...\n\n#include \"CybLicense_<id>.h\" -> #include \"CybLicense_<newId>.h\"\n\n...\n\n#include \"Model_<id>.h\" -> #include \"Model_<newId>.h\"\n\n...\n\n#include \"CybLicense_<id>.h\" -> #include \"CybLicense_<newId>.h\"\nUpload the sketch to your board, and you will have unlocked the limitations of the trial version.\n\nLicensing\nHere you can know more about the different licenses and limitations of each device. Remember that the code that you get for your license is also called a voucher code.\n\nLicense options for the Arduino Speech Recognition Engine\nLicense options for the Arduino Speech Recognition Engine\n\nFree Demo\nCompatible with the CDSpotterSDK library\nNumber of SET: x1\nNumber of TRIGGERS: x1\nNumber of COMMANDS: 4\nConfigure TRIGGER: Fixed (not configurable)\nConfigure COMMANDS: Fixed (not configurable)\nRecognition times: Unlimited\nDelay in Trigger mode: no\nHardware binding: no\nSpeech Recognition Free Trial\nOnce the number of recognition is reached the model will stop working and you will need to manually reboot the target.\n\nCompatible with the CDSpotterSDK library\nNumber of SET: x1\nNumber of TRIGGERS: x1\nNumber of COMMANDS: 20 maximum\nConfigure TRIGGER: Configurable\nConfigure COMMANDS: Configurable\nRecognition times: x50\nDelay in Trigger mode: 20 seconds [1]\nHardware binding: Yes\n[1] Please note that the delay in Trigger mode means a 20 seconds delay between entering the trigger mode and the recognition of the wake-up word.\n\nSpeech Recognition License\nCompatible with the CDSpotterSDK library\nNumber of SET: x1\nNumber of TRIGGERS: x1\nNumber of COMMANDS: 20 maximum\nConfigure TRIGGER: Configurable\nConfigure COMMANDS: Configurable\nRecognition times: Unlimited\nDelay in Trigger mode: No delay\nHardware binding: Yes\nPRO\nCompatible with the CDSpotterSDK PRO library\nNumber of SET: Unlimited (depends on the hardware)\nNumber of TRIGGERS: Unlimited (depends on the hardware)\nNumber of COMMANDS: Unlimited (depends on the hardware)\nConfigure TRIGGER: Configurable\nConfigure COMMANDS: Configurable\nRecognition times: Unlimited\nDelay in Trigger mode: No delay\nHardware binding: Yes\nNext Steps\nAfter getting the demo sketch working, we encourage you to start implementing this on your own project to unleash the full potential of the Arduino Speech Recognition Engine.\n\nIn case you are looking for more information, you can check out Cyberon's documentation:\n\nInside each of the libraries and under the folder \"extra\", you will find additional documentation made by Cyberon, as well as the Readme.md file that contains the requirements and the steps shown in this tutorial\nCyberon's youtube channel contains a series of step-by-step tutorials that can help you to know more about how to use the Arduino Speech Recognition Engine\nYou can also consult Cyberon's official Maker User Guide\nConclusion\nIn this tutorial, you have learned what is the Arduino Speech Recognition Engine, the different licenses and limitations, and how to acquire one. Once you have your license, you learned how to test it with the free demo sketch and how to create a project with your own custom voice triggers. Eventually, you learned how to upgrade a free already-made project to be used with a more advanced license.\n\nSuggest changes\nThe content on docs.arduino.cc is facilitated through a public GitHub repository. If you see anything wrong, you can edit this page here.\n\nNeed support?\nHelp Center\nAsk the Arduino Forum\nDiscover Arduino Discord\n.",
    "search_queries": [
        "This appears to be a tutorial on using the Arduino Speech Recognition Engine. Here is a summary of the content in plain text format:",
        "",
        "**Introduction**",
        "",
        "* The Arduino Speech Recognition Engine is a tool that allows you to create voice-controlled projects with your Arduino board.",
        "* There are different licenses available, including free and paid options.",
        "",
        "**Getting Started**",
        "",
        "* You can acquire a license by purchasing it from the official website or by using a free demo sketch provided in the tutorial.",
        "* To test the engine, you need to upload the demo sketch to your Arduino board and follow the instructions in the tutorial.",
        "",
        "**Creating a Project**",
        "",
        "* Once you have a license, you can create a project with your own custom voice triggers.",
        "* The tutorial provides step-by-step instructions on how to set up and configure the engine for your project.",
        "",
        "**Upgrading from Free to Paid License**",
        "",
        "* If you're using a free already-made project, you can upgrade it to use a more advanced license by following the instructions in the tutorial.",
        "",
        "**Additional Resources**",
        "",
        "* The content is facilitated through a public GitHub repository.",
        "* You can edit this page if you see anything wrong.",
        "* There are additional resources available, including YouTube tutorials and an official Maker User Guide."
    ]
}