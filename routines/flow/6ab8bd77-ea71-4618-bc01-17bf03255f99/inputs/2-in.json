{
    "system_message": "You are an AI that breaks down complex tasks into hierarchical steps. For each task, generate a set of sub-steps needed to complete it. Maintain clarity and logical order. IMPORTANT: Avoid duplicating steps that already exist elsewhere in the tree context provided. Focus on sub-steps that are specific to the current task being expanded. Format your response as a valid JSON array of step objects, where each object has a 'step' field and optionally a 'children' array containing substeps. Example format: [{'step': 'Main step 1', 'children': [{'step': 'Substep 1.1'}, {'step': 'Substep 1.2'}]}, {'step': 'Main step 2'}] Your entire response must be parseable as JSON. Do not include markdown formatting, code blocks, or commentary.",
    "user_message": "Break down the following task into 3-7 sub-steps. Task: Scale Resources as Needed\n\nDo NOT repeat steps that have already been created in the tree unless ABSOLUTELY NECESSARY.\nFocus on sub-steps that are specific to this task and avoid duplicating steps that already exist in the broader process.\n\n\nExisting steps in the tree (avoid duplicating these): High-Performance Computing, Define HPC Requirements, Identify Key Application Needs, Determine Computational Intensity, Establish Performance Metrics (e.g., FLOPS, latency), Define Data Requirements (size, format, I/O), Specify Required Memory Capacity, Determine Network Bandwidth Needs, Document Resource Constraints (budget, power, space), Assess Available Hardware Resources, Identify All Hardware Assets, Document Hardware Specifications, Verify Hardware Compatibility, Assess Hardware Age and Condition, Check Hardware Utilization Rates (if available), Select Appropriate Software, Research Potential Software Solutions, Evaluate Software Features Against Requirements, Compare Software Licensing Costs, Test Software with Sample Data, Assess Software Support and Documentation, Consider Software Scalability, Optimize Code for Parallel Execution, Analyze Code for Parallelism Opportunities, Identify Critical Code Sections, Look for Data-Parallel Operations, Identify Independent Tasks, Pinpoint CPU-Bound Bottlenecks, Determine Data Dependencies, Map Data Sharing Requirements, Analyze Data Structures for Parallelism, Implement Parallelization Strategies, Choose Appropriate Parallel Programming Model (e.g., MPI, OpenMP, CUDA), Evaluate Model Suitability for Application, Consider Ease of Use and Debugging, Modify Code to Utilize Parallel Constructs, Introduce Threading or Process Creation, Implement Data Partitioning, Validate Parallel Implementation, Conduct Parallel Execution Tests, Run Tests with Representative Datasets, Measure Execution Time and Resource Utilization, Analyze Performance Results, Compare Parallel Performance to Sequential Performance, Identify Remaining Bottlenecks, Monitor System Performance, Establish Baseline Performance Metrics, Configure System Monitoring Tools, Collect Performance Data Regularly, Analyze Collected Data for Anomalies, Generate Performance Reports, Scale Resources as Needed\n\nReturn ONLY a JSON array of step objects, with no markdown formatting, code blocks, or extra text.",
    "timestamp": "2025-06-01T20:19:40.344588"
}