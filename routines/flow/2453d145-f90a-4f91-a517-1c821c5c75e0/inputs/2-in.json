{
    "system_message": "You are an AI that breaks down complex tasks into hierarchical steps. For each task, generate a set of sub-steps needed to complete it. Maintain clarity and logical order. IMPORTANT: Avoid duplicating steps that already exist elsewhere in the tree context provided. Focus on sub-steps that are specific to the current task being expanded. Format your response as a valid JSON array of step objects, where each object has a 'step' field and optionally a 'children' array containing substeps. Example format: [{'step': 'Main step 1', 'children': [{'step': 'Substep 1.1'}, {'step': 'Substep 1.2'}]}, {'step': 'Main step 2'}] Your entire response must be parseable as JSON. Do not include markdown formatting, code blocks, or commentary.",
    "user_message": "Break down the following task into 3-7 sub-steps. Task: Version Control IaC Code\n\nDo NOT repeat steps that have already been created in the tree unless ABSOLUTELY NECESSARY.\nFocus on sub-steps that are specific to this task and avoid duplicating steps that already exist in the broader process.\n\n\nExisting steps in the tree (avoid duplicating these): Infrastructure as Code (IaC), Define Infrastructure Requirements, Identify Infrastructure Components, Determine Hardware Requirements, Specify Network Requirements, Define Storage Requirements, Document Security Requirements, Assess Performance Needs, Outline Scalability Requirements, Select IaC Tooling (e.g., Terraform, Ansible), Evaluate IaC Tool Capabilities, Compare Tool Features Against Requirements, Assess Community Support and Ecosystem, Evaluate Tool Cost (Licensing, Training), Pilot Tool with a Small Test Environment, Document Tool Selection Rationale, Write IaC Code, Choose IaC Language/Format (e.g., YAML, JSON, HCL), Create Initial IaC Code Structure, Implement Core Infrastructure Components, Configure Component Interdependencies, Add Basic Resource Definitions, Implement Initial Testing Procedures, Test IaC Code (Unit & Integration Tests), Execute Unit Tests for IaC Code Modules, Run Integration Tests to Verify Component Interactions, Validate Test Data Integrity, Analyze Test Results and Identify Failures, Debug Failed Tests and Correct Code Issues, Retest Fixed Components, Generate Test Reports Summarizing Findings, Deploy IaC Code to Environment, Prepare Environment for Deployment, Verify Environment Access Credentials, Ensure Deployment Tools are Installed and Configured, Execute Deployment Command, Specify Target Environment, Execute IaC Deployment Script, Post-Deployment Verification, Confirm Resource Creation, Verify Component Status, Monitor Infrastructure Changes, Establish Monitoring Baseline, Define Key Performance Indicators (KPIs) for Infrastructure, Select Monitoring Tools (e.g., Prometheus, Grafana, CloudWatch), Configure Monitoring Agents on Infrastructure Components, Establish Alerting Rules Based on KPI Thresholds, Regularly Review Monitoring Data for Anomalies, Document Monitoring Procedures and Reporting Processes, Version Control IaC Code\n\nReturn ONLY a JSON array of step objects, with no markdown formatting, code blocks, or extra text.",
    "timestamp": "2025-06-01T21:22:50.369838"
}