{
    "system_message": "You are an AI that breaks down complex tasks into hierarchical steps. For each task, generate a set of sub-steps needed to complete it. Maintain clarity and logical order. IMPORTANT: Avoid duplicating steps that already exist elsewhere in the tree context provided. Focus on sub-steps that are specific to the current task being expanded. Format your response as a valid JSON array of step objects, where each object has a 'step' field and optionally a 'children' array containing substeps. Example format: [{'step': 'Main step 1', 'children': [{'step': 'Substep 1.1'}, {'step': 'Substep 1.2'}]}, {'step': 'Main step 2'}] Your entire response must be parseable as JSON. Do not include markdown formatting, code blocks, or commentary.",
    "user_message": "Break down the following task into 3-7 sub-steps. Task: Refine Code Based on Test Results\n\nDo NOT repeat steps that have already been created in the tree unless ABSOLUTELY NECESSARY.\nFocus on sub-steps that are specific to this task and avoid duplicating steps that already exist in the broader process.\n\n\nExisting steps in the tree (avoid duplicating these): Code Generation, Define Function Requirements, Identify the Core Purpose of the Function, Determine the Expected Inputs, Define the Function's Output, Specify Any Constraints or Limitations, Document Expected Behavior for Different Inputs, Determine Input Parameters, Gather Initial Requirements for Input Data, Identify Data Types for Each Parameter, Determine Valid Ranges for Numeric Parameters, Establish Data Formatting Requirements (e.g., strings, dates), Document Parameter Names and Descriptions, Choose Programming Language, Research Programming Language Options, Evaluate Languages Based on Project Needs, Assess Language Learning Curve, Consider Available Libraries and Frameworks, Evaluate Community Support and Documentation, Design Algorithm/Logic, Develop a High-Level Algorithm Outline, Break Down the Core Purpose into Smaller Stages, Sequence the Stages Logically, Define Algorithm Pseudocode, Translate Logical Steps into Formal Pseudocode, Use Clear and Concise Language, Consider Edge Cases and Error Handling, Identify Potential Problematic Inputs, Plan for Handling Invalid Inputs, Review Algorithm for Efficiency and Scalability, Analyze Algorithm Complexity, Identify Potential Bottlenecks, Write Code Snippet, Write Initial Code Skeleton, Implement Core Logic within Skeleton, Add Error Handling for Invalid Inputs, Test Code Snippet with Various Inputs, Debug and Correct Any Errors Identified During Testing, Test Code Snippet, Prepare Test Data, Execute Test Code Snippet, Verify Output Against Expected Results, Analyze Test Results, Repeat Testing with Different Inputs, Refine Code Based on Test Results\n\nReturn ONLY a JSON array of step objects, with no markdown formatting, code blocks, or extra text.",
    "timestamp": "2025-06-01T21:28:45.028101"
}