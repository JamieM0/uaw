[
  {
    "id": "schema.integrity.missing_root",
    "name": "Simulation Root Check",
    "description": "Ensures the top-level 'simulation' object exists.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateRootObject" }
  },
  {
    "id": "resource.flow.negative_stock",
    "name": "Negative Stock Check",
    "description": "Verifies that no consumable resource stock level drops below zero.",
    "category": "Resource Flow",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateNegativeStock" }
  },
  {
    "id": "resource.flow.recipe_violation",
    "name": "Recipe Ingredients Check",
    "description": "Checks if tasks producing a composite resource consume all the ingredients defined in the simulation's 'production_recipes' section.",
    "category": "Resource Flow",
    "severity": "warning",
    "validation_type": "computational",
    "computation": {
      "engine": "javascript",
      "function_name": "validateRecipeCompliance"
    }
  },
  {
    "id": "equipment.state.logic",
    "name": "Equipment State Logic",
    "description": "Checks for logical consistency in equipment usage, such as using a 'dirty' mixer or equipment that is already in use.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateEquipmentState" }
  },
  {
    "id": "actor.scheduling.overlap",
    "name": "Actor Task Overlap",
    "description": "Checks if any single actor is assigned to multiple tasks that overlap in time.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateActorOverlap" }
  },
  {
    "id": "temporal.dependency.violation",
    "name": "Task Dependency Timing",
    "description": "Ensures that no task starts before its declared dependencies have finished.",
    "category": "Scheduling",
    "severity": "warning",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateDependencyTiming" }
  },
  {
    "id": "scheduling.optimization.missing_buffer",
    "name": "Missing Buffer Time",
    "description": "Suggests adding a small buffer between consecutive tasks for the same actor to improve realism.",
    "category": "Optimization",
    "severity": "info",
    "validation_type": "computational",
    "computation": {
      "engine": "javascript",
      "function_name": "validateMissingBufferTime",
      "params": {
        "minimum_buffer_minutes": 5
      }
    }
  },
  {
  "id": "task.integrity.unassigned_actor",
  "name": "Unassigned Task Actor",
  "description": "Ensures every task is assigned to a valid, defined actor.",
  "category": "Structural Integrity",
  "severity": "error",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnassignedTasks" }
  },
  {
  "id": "resource.definition.unused",
  "name": "Unused Resource",
  "description": "Flags consumable resources that are defined in the simulation but are never consumed or produced by any task.",
  "category": "Optimization",
  "severity": "info",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnusedResources" }
  },
  {
  "id": "task.dependency.unreachable",
  "name": "Unreachable Task Dependency",
  "description": "Ensures that every task listed in a 'depends_on' array corresponds to a valid, defined task ID.",
  "category": "Structural Integrity",
  "severity": "error",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnreachableDependencies" }
  },
  {
  "id": "economic.profitability.negative_margin",
  "name": "Negative Profitability",
  "description": "Calculates total revenue from final products and subtracts total costs of labor and consumed resources. Flags if the result is negative.",
  "category": "Economic",
  "severity": "warning",
  "validation_type": "computational",
  "computation": {
    "engine": "javascript",
    "function_name": "validateProfitability",
    "params": {
      "final_product_ids": ["baked_bread"]
    }
  }
  },
  {
    "id": "object.spatial.location_undefined",
    "name": "Undefined Location",
    "description": "Ensures every object with a location property is assigned to a valid, defined location from the layout.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateObjectLocations" }
  },
  {
    "id": "task.spatial.unmet_proximity_requirement",
    "name": "Task Proximity Check",
    "description": "Checks if the actor and all required equipment/resources for a task are in the same location as the task itself.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateTaskProximity" }
  },
  {
    "id": "schema.integrity.disallowed_types",
    "name": "Disallowed Object Types",
    "description": "Ensures no objects use internally reserved types that could cause system conflicts.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { 
      "engine": "javascript", 
      "function_name": "validateDisallowedTypes",
      "params": {
        "disallowed_types": ["timeline_actors"]
      }
    }
  },
  {
    "id": "display.spatial.elements_outside_bounds",
    "name": "Display Elements Outside Bounds",
    "description": "Checks if any display elements extend beyond the viewport boundaries of their display.",
    "category": "Structural Integrity",
    "severity": "warning",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateDisplayElementBounds" }
  },
  {
    "id": "task.integrity.invalid_duration",
    "name": "Invalid Task Duration",
    "description": "Ensures all task durations are positive integers.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateTaskDuration" }
  },
  {
    "id": "task.integrity.invalid_start_time",
    "name": "Invalid Start Time Format",
    "description": "Ensures all task start times follow HH:MM string format.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateStartTimeFormat" }
  },
  {
    "id": "task.integrity.invalid_object_reference",
    "name": "Invalid Object Reference",
    "description": "Ensures all tasks reference valid object IDs that exist in the simulation.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateObjectReferences" }
  },
  {
    "id": "task.integrity.invalid_task_id",
    "name": "Invalid Task ID",
    "description": "Ensures task IDs are unique strings and not empty/null.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateTaskIds" }
  },
  {
    "id": "object.integrity.invalid_object_id",
    "name": "Invalid Object ID",
    "description": "Ensures object IDs are unique strings and not empty/null.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateObjectIds" }
  },
  {
    "id": "object.integrity.missing_required_properties",
    "name": "Missing Required Properties",
    "description": "Check that objects have required properties based on their type.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateRequiredProperties" }
  },
  {
    "id": "object.integrity.invalid_property_types",
    "name": "Invalid Property Types",
    "description": "Validate that object properties match expected data types.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validatePropertyTypes" }
  },
  {
    "id": "task.integrity.end_time_overflow",
    "name": "Task End Time Overflow",
    "description": "Check if task start + duration exceeds 24:00 or causes day boundary issues.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateTaskEndTimeOverflow" }
  },
  {
    "id": "task.dependency.circular_reference",
    "name": "Circular Dependencies",
    "description": "Detect circular references in task dependency chains.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateCircularDependencies" }
  },
  {
    "id": "task.dependency.self_reference",
    "name": "Self-Referencing Dependencies",
    "description": "Catch tasks that depend on themselves.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateSelfReferencingDependencies" }
  },
  {
    "id": "task.dependency.missing_reference",
    "name": "Missing Task Dependencies",
    "description": "Validate that all referenced dependency IDs exist.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateMissingTaskDependencies" }
  },
  {
    "id": "resource.integrity.invalid_quantity",
    "name": "Invalid Quantity Values",
    "description": "Ensure resource quantities are non-negative numbers.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateResourceQuantities" }
  },
  {
    "id": "equipment.integrity.invalid_capacity",
    "name": "Equipment Capacity Validation",
    "description": "Check that equipment capacity values are positive integers.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateEquipmentCapacity" }
  },
  {
    "id": "equipment.state.invalid_transitions",
    "name": "Invalid State Transitions",
    "description": "Validate that equipment state changes are logical (available→in_use→dirty, etc.).",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateStateTransitions" }
  },
  {
    "id": "resource.integrity.type_consistency",
    "name": "Resource Type Consistency",
    "description": "Ensure resources maintain consistent types throughout interactions.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateResourceTypeConsistency" }
  }
]