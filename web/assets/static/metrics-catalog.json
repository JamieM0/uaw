[
  {
    "id": "schema.integrity.missing_root",
    "name": "Simulation Root Check",
    "description": "Ensures the top-level 'simulation' object exists.",
    "category": "Structural Integrity",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateRootObject" }
  },
  {
    "id": "resource.flow.negative_stock",
    "name": "Negative Stock Check",
    "description": "Verifies that no consumable resource stock level drops below zero.",
    "category": "Resource Flow",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateNegativeStock" }
  },
  {
    "id": "resource.flow.recipe_violation",
    "name": "Recipe Ingredients Check",
    "description": "Checks if tasks producing a composite resource consume all the ingredients defined in the simulation's 'production_recipes' section.",
    "category": "Resource Flow",
    "severity": "warning",
    "validation_type": "computational",
    "computation": {
      "engine": "javascript",
      "function_name": "validateRecipeCompliance"
    }
  },
  {
    "id": "equipment.state.logic",
    "name": "Equipment State Logic",
    "description": "Checks for logical consistency in equipment usage, such as using a 'dirty' mixer or equipment that is already in use.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateEquipmentState" }
  },
  {
    "id": "actor.scheduling.overlap",
    "name": "Actor Task Overlap",
    "description": "Checks if any single actor is assigned to multiple tasks that overlap in time.",
    "category": "Scheduling",
    "severity": "error",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateActorOverlap" }
  },
  {
    "id": "temporal.dependency.violation",
    "name": "Task Dependency Timing",
    "description": "Ensures that no task starts before its declared dependencies have finished.",
    "category": "Scheduling",
    "severity": "warning",
    "validation_type": "computational",
    "computation": { "engine": "javascript", "function_name": "validateDependencyTiming" }
  },
  {
    "id": "scheduling.optimization.missing_buffer",
    "name": "Missing Buffer Time",
    "description": "Suggests adding a small buffer between consecutive tasks for the same actor to improve realism.",
    "category": "Optimization",
    "severity": "info",
    "validation_type": "computational",
    "computation": {
      "engine": "javascript",
      "function_name": "validateMissingBufferTime",
      "params": {
        "minimum_buffer_minutes": 5
      }
    }
  },
  {
  "id": "task.integrity.unassigned_actor",
  "name": "Unassigned Task Actor",
  "description": "Ensures every task is assigned to a valid, defined actor.",
  "category": "Structural Integrity",
  "severity": "error",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnassignedTasks" }
  },
  {
  "id": "resource.definition.unused",
  "name": "Unused Resource",
  "description": "Flags consumable resources that are defined in the simulation but are never consumed or produced by any task.",
  "category": "Optimization",
  "severity": "info",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnusedResources" }
  },
  {
  "id": "equipment.capacity.exceeded",
  "name": "Equipment Capacity Exceeded",
  "description": "Ensures that the number of concurrent tasks using a piece of equipment never exceeds its specified capacity.",
  "category": "Scheduling",
  "severity": "error",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateEquipmentCapacity" }
  },
  {
  "id": "task.dependency.unreachable",
  "name": "Unreachable Task Dependency",
  "description": "Ensures that every task listed in a 'depends_on' array corresponds to a valid, defined task ID.",
  "category": "Structural Integrity",
  "severity": "error",
  "validation_type": "computational",
  "computation": { "engine": "javascript", "function_name": "validateUnreachableDependencies" }
  },
  {
  "id": "economic.profitability.negative_margin",
  "name": "Negative Profitability",
  "description": "Calculates total revenue from final products and subtracts total costs of labor and consumed resources. Flags if the result is negative.",
  "category": "Economic",
  "severity": "warning",
  "validation_type": "computational",
  "computation": {
    "engine": "javascript",
    "function_name": "validateProfitability",
    "params": {
      "final_product_ids": ["baked_bread"]
    }
  }
}
]